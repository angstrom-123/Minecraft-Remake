#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i ./src/shaders/chunk.glsl -o ./src/shaders/chunk.glsl.h -l glsl300es

    Overview:
    =========
    Shader program: 'chunk':
        Get shader desc: chunk_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_chunk_a_xyzn => 0
            ATTR_chunk_a_uv => 1
    Bindings:
        Uniform block 'vs_params':
            C struct: vs_params_t
            Bind slot: UB_vs_params => 0
        Image 'u_tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_u_tex => 0
        Sampler 'u_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_u_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before chunk.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_chunk_a_xyzn (0)
#define ATTR_chunk_a_uv (1)
#define UB_vs_params (0)
#define IMG_u_tex (0)
#define SMP_u_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    em_mat4 u_mvp;
    float u_chnk_pos[3];
    uint8_t _pad_76[4];
} vs_params_t;
#pragma pack(pop)
/*
    #version 300 es

    uniform vec4 vs_params[5];
    layout(location = 0) in uvec4 a_xyzn;
    out vec2 v_uv;
    layout(location = 1) in uint a_uv;
    out vec3 v_norm;

    float round_down(float num, float to)
    {
        float _97 = mod(num, to);
        if (abs(_97 - to) < 9.9999999392252902907785028219223e-09)
        {
            return _97;
        }
        return num - _97;
    }

    float round_up(float down, float num, float to)
    {
        if (num == down)
        {
            return num;
        }
        return down + to;
    }

    float round_nearest(float num, float to)
    {
        float param = num;
        float param_1 = to;
        float _130 = round_down(param, param_1);
        float param_2 = _130;
        float param_3 = num;
        float param_4 = to;
        float _138 = round_up(param_2, param_3, param_4);
        if ((num - _130) < (_138 - num))
        {
            return _130;
        }
        return _138;
    }

    vec2 unpack_uv(uint _packed)
    {
        float param = float(_packed >> uint(16)) * 1.525902189314365386962890625e-05;
        float param_1 = 0.0005000000237487256526947021484375;
        float param_2 = float(_packed & 65535u) * 1.525902189314365386962890625e-05;
        float param_3 = 0.0005000000237487256526947021484375;
        return vec2(round_nearest(param, param_1), round_nearest(param_2, param_3));
    }

    vec3 unpack_normal(uint _packed)
    {
        uint _38 = _packed & 3u;
        uint _45 = (_packed & 12u) >> uint(2);
        uint _51 = (_packed & 48u) >> uint(4);
        float x = 0.0;
        float y = 0.0;
        float z = 0.0;
        if (_38 == 1u)
        {
            x = 1.0;
        }
        else
        {
            if (_38 == 2u)
            {
                x = -1.0;
            }
        }
        if (_45 == 1u)
        {
            y = 1.0;
        }
        else
        {
            if (_45 == 2u)
            {
                y = -1.0;
            }
        }
        if (_51 == 1u)
        {
            z = 1.0;
        }
        else
        {
            if (_51 == 2u)
            {
                z = -1.0;
            }
        }
        return vec3(x, y, z);
    }

    void main()
    {
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(vec3(a_xyzn.xyz) + vs_params[4].xyz, 1.0);
        uint param = a_uv;
        v_uv = unpack_uv(param);
        uint param_1 = a_xyzn.w;
        v_norm = unpack_normal(param_1);
    }

*/
static const uint8_t vs_source_glsl300es[2119] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x75,0x76,0x65,0x63,0x34,0x20,0x61,0x5f,0x78,0x79,0x7a,0x6e,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x75,0x69,0x6e,0x74,0x20,0x61,0x5f,
    0x75,0x76,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,
    0x6f,0x72,0x6d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x6e,
    0x64,0x5f,0x64,0x6f,0x77,0x6e,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x75,0x6d,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x6f,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x37,0x20,0x3d,0x20,0x6d,0x6f,
    0x64,0x28,0x6e,0x75,0x6d,0x2c,0x20,0x74,0x6f,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x61,0x62,0x73,0x28,0x5f,0x39,0x37,0x20,0x2d,0x20,0x74,0x6f,
    0x29,0x20,0x3c,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x33,0x39,0x32,
    0x32,0x35,0x32,0x39,0x30,0x32,0x39,0x30,0x37,0x37,0x38,0x35,0x30,0x32,0x38,0x32,
    0x31,0x39,0x32,0x32,0x33,0x65,0x2d,0x30,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x5f,0x39,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6e,0x75,0x6d,0x20,0x2d,0x20,0x5f,0x39,0x37,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x6e,0x64,0x5f,
    0x75,0x70,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x6f,0x77,0x6e,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x6e,0x75,0x6d,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x74,0x6f,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x6e,0x75,
    0x6d,0x20,0x3d,0x3d,0x20,0x64,0x6f,0x77,0x6e,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6e,0x75,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x64,0x6f,0x77,0x6e,0x20,0x2b,0x20,0x74,0x6f,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x6f,0x75,0x6e,0x64,0x5f,
    0x6e,0x65,0x61,0x72,0x65,0x73,0x74,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x75,
    0x6d,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x6f,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x6e,0x75,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x74,0x6f,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x30,0x20,0x3d,0x20,0x72,
    0x6f,0x75,0x6e,0x64,0x5f,0x64,0x6f,0x77,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,
    0x31,0x33,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x6e,0x75,0x6d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,
    0x3d,0x20,0x74,0x6f,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x33,0x38,0x20,0x3d,0x20,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x75,0x70,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x28,0x6e,0x75,0x6d,0x20,0x2d,0x20,0x5f,0x31,0x33,0x30,0x29,
    0x20,0x3c,0x20,0x28,0x5f,0x31,0x33,0x38,0x20,0x2d,0x20,0x6e,0x75,0x6d,0x29,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x31,0x33,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x31,0x33,
    0x38,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,0x75,0x6e,0x70,0x61,0x63,
    0x6b,0x5f,0x75,0x76,0x28,0x75,0x69,0x6e,0x74,0x20,0x5f,0x70,0x61,0x63,0x6b,0x65,
    0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x70,0x61,
    0x63,0x6b,0x65,0x64,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x36,0x29,
    0x29,0x20,0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,
    0x31,0x34,0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,
    0x35,0x65,0x2d,0x30,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x30,0x2e,0x30,0x30,0x30,
    0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x37,0x34,0x38,0x37,0x32,0x35,0x36,
    0x35,0x32,0x36,0x39,0x34,0x37,0x30,0x32,0x31,0x34,0x38,0x34,0x33,0x37,0x35,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x70,0x61,0x63,0x6b,
    0x65,0x64,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x20,0x2a,0x20,0x31,
    0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,0x31,0x34,0x33,0x36,0x35,
    0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,0x65,0x2d,0x30,0x35,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x20,0x3d,0x20,0x30,0x2e,0x30,0x30,0x30,0x35,0x30,0x30,0x30,0x30,
    0x30,0x30,0x32,0x33,0x37,0x34,0x38,0x37,0x32,0x35,0x36,0x35,0x32,0x36,0x39,0x34,
    0x37,0x30,0x32,0x31,0x34,0x38,0x34,0x33,0x37,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x72,0x6f,0x75,0x6e,
    0x64,0x5f,0x6e,0x65,0x61,0x72,0x65,0x73,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x2c,0x20,0x72,0x6f,0x75,0x6e,0x64,
    0x5f,0x6e,0x65,0x61,0x72,0x65,0x73,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x65,0x63,0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x28,0x75,0x69,0x6e,0x74,0x20,0x5f,0x70,0x61,0x63,0x6b,0x65,0x64,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x33,0x38,0x20,
    0x3d,0x20,0x5f,0x70,0x61,0x63,0x6b,0x65,0x64,0x20,0x26,0x20,0x33,0x75,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x35,0x20,0x3d,0x20,0x28,
    0x5f,0x70,0x61,0x63,0x6b,0x65,0x64,0x20,0x26,0x20,0x31,0x32,0x75,0x29,0x20,0x3e,
    0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x5f,0x35,0x31,0x20,0x3d,0x20,0x28,0x5f,0x70,0x61,0x63,0x6b,
    0x65,0x64,0x20,0x26,0x20,0x34,0x38,0x75,0x29,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,
    0x74,0x28,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x78,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x79,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x7a,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x38,0x20,0x3d,0x3d,0x20,0x31,0x75,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x78,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x38,0x20,0x3d,0x3d,
    0x20,0x32,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x78,0x20,0x3d,0x20,0x2d,
    0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x34,0x35,
    0x20,0x3d,0x3d,0x20,0x31,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x34,0x35,0x20,0x3d,0x3d,0x20,0x32,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x79,0x20,0x3d,0x20,0x2d,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3d,0x3d,0x20,0x31,0x75,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7a,0x20,0x3d,0x20,
    0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3d,0x3d,0x20,0x32,0x75,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7a,0x20,0x3d,0x20,0x2d,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x28,0x78,0x2c,0x20,0x79,0x2c,0x20,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x76,0x65,0x63,0x33,0x28,0x61,0x5f,0x78,0x79,0x7a,0x6e,0x2e,0x78,0x79,
    0x7a,0x29,0x20,0x2b,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x61,0x5f,
    0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x75,
    0x6e,0x70,0x61,0x63,0x6b,0x5f,0x75,0x76,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x20,0x3d,0x20,0x61,0x5f,0x78,0x79,0x7a,0x6e,0x2e,0x77,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x75,0x6e,0x70,0x61,0x63,
    0x6b,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp sampler2D u_tex_u_smp;

    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 v_uv;
    in highp vec3 v_norm;

    void main()
    {
        if (frag_color.w < 0.00999999977648258209228515625)
        {
            discard;
        }
        frag_color = texture(u_tex_u_smp, v_uv);
        highp vec4 _48 = frag_color;
        highp vec3 _50 = _48.xyz * (0.699999988079071044921875 + (0.300000011920928955078125 * dot(v_norm, vec3(0.7070000171661376953125, 1.0, 0.7070000171661376953125))));
        frag_color.x = _50.x;
        frag_color.y = _50.y;
        frag_color.z = _50.z;
    }

*/
static const uint8_t fs_source_glsl300es[620] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x73,
    0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x77,0x20,0x3c,0x20,0x30,0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x39,
    0x37,0x37,0x36,0x34,0x38,0x32,0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,0x35,0x31,
    0x35,0x36,0x32,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x74,0x65,
    0x78,0x5f,0x75,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x5f,0x75,0x76,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x34,0x38,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x35,0x30,0x20,0x3d,0x20,0x5f,0x34,0x38,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,
    0x28,0x30,0x2e,0x36,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x30,0x37,0x39,0x30,
    0x37,0x31,0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x20,0x2b,0x20,0x28,0x30,
    0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,
    0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,
    0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x37,
    0x30,0x37,0x30,0x30,0x30,0x30,0x31,0x37,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,
    0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x37,0x30,
    0x37,0x30,0x30,0x30,0x30,0x31,0x37,0x31,0x36,0x36,0x31,0x33,0x37,0x36,0x39,0x35,
    0x33,0x31,0x32,0x35,0x29,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x35,0x30,
    0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x35,0x30,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x20,0x3d,
    0x20,0x5f,0x35,0x30,0x2e,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* chunk_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_UINT;
            desc.attrs[0].glsl_name = "a_xyzn";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_UINT;
            desc.attrs[1].glsl_name = "a_uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 80;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 5;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "vs_params";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "u_tex_u_smp";
            desc.label = "chunk_shader";
        }
        return &desc;
    }
    return 0;
}
