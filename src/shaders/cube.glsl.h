#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i ./src/shaders/cube.glsl -o ./src/shaders/cube.glsl.h -l glsl300es

    Overview:
    =========
    Shader program: 'cube':
        Get shader desc: cube_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_cube_i_pos => 0
            ATTR_cube_i_norm => 1
            ATTR_cube_i_uv => 2
    Bindings:
        Uniform block 'vs_params':
            C struct: vs_params_t
            Bind slot: UB_vs_params => 0
        Image 'u_tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_u_tex => 0
        Sampler 'u_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_u_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before cube.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_cube_i_pos (0)
#define ATTR_cube_i_norm (1)
#define ATTR_cube_i_uv (2)
#define UB_vs_params (0)
#define IMG_u_tex (0)
#define SMP_u_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    em_mat4 u_mvp;
    int u_cnt;
    uint8_t _pad_68[12];
    float u_data[256][4];
} vs_params_t;
#pragma pack(pop)
/*
    #version 300 es

    struct vs_params
    {
        mat4 u_mvp;
        int u_cnt;
        vec4 u_data[256];
    };

    uniform vs_params _21;

    layout(location = 0) in vec3 i_pos;
    out vec3 v_norm;
    layout(location = 1) in vec3 i_norm;
    out vec2 v_uv;
    layout(location = 2) in vec2 i_uv;
    out float v_type;

    void main()
    {
        if (gl_InstanceID < _21.u_cnt)
        {
            gl_Position = _21.u_mvp * vec4(_21.u_data[gl_InstanceID].xyz + i_pos, 1.0);
            v_norm = i_norm;
            v_uv = i_uv;
            v_type = _21.u_data[gl_InstanceID].w;
        }
        else
        {
            gl_Position = vec4(0.0);
        }
    }

*/
static const uint8_t vs_source_glsl300es[571] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x6d,
    0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x75,0x5f,0x63,0x6e,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x75,0x5f,0x64,0x61,
    0x74,0x61,0x5b,0x32,0x35,0x36,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,
    0x32,0x31,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x69,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x5f,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x5f,0x75,0x76,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x5f,0x74,0x79,0x70,
    0x65,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,
    0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x3c,0x20,0x5f,0x32,0x31,0x2e,0x75,0x5f,
    0x63,0x6e,0x74,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x5f,0x32,0x31,0x2e,0x75,0x5f,0x6d,0x76,0x70,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x5f,0x32,0x31,0x2e,0x75,0x5f,0x64,0x61,0x74,0x61,0x5b,0x67,0x6c,0x5f,
    0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x5d,0x2e,0x78,0x79,0x7a,0x20,
    0x2b,0x20,0x69,0x5f,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x20,0x3d,0x20,
    0x69,0x5f,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x5f,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x76,0x5f,0x74,0x79,0x70,0x65,0x20,0x3d,0x20,0x5f,0x32,
    0x31,0x2e,0x75,0x5f,0x64,0x61,0x74,0x61,0x5b,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,
    0x61,0x6e,0x63,0x65,0x49,0x44,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp sampler2D u_tex_u_smp;

    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 v_uv;
    in highp vec3 v_norm;
    in highp float v_type;

    void main()
    {
        frag_color = texture(u_tex_u_smp, v_uv);
        highp vec4 _37 = frag_color;
        highp vec3 _39 = _37.xyz * (0.699999988079071044921875 + (0.300000011920928955078125 * v_norm.y));
        frag_color.x = _39.x;
        frag_color.y = _39.y;
        frag_color.z = _39.z;
    }

*/
static const uint8_t fs_source_glsl300es[492] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x73,
    0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x69,
    0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x5f,
    0x74,0x79,0x70,0x65,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,
    0x74,0x65,0x78,0x5f,0x75,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x5f,0x75,0x76,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x5f,0x33,0x39,0x20,0x3d,0x20,0x5f,0x33,0x37,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x28,0x30,0x2e,0x36,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x30,0x37,
    0x39,0x30,0x37,0x31,0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x20,0x2b,0x20,
    0x28,0x30,0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,
    0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x20,0x2a,0x20,0x76,0x5f,
    0x6e,0x6f,0x72,0x6d,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x33,0x39,
    0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x33,0x39,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x20,0x3d,
    0x20,0x5f,0x33,0x39,0x2e,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* cube_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "i_pos";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "i_norm";
            desc.attrs[2].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[2].glsl_name = "i_uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 4176;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_21.u_mvp";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_21.u_cnt";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 256;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_21.u_data";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "u_tex_u_smp";
            desc.label = "cube_shader";
        }
        return &desc;
    }
    return 0;
}
